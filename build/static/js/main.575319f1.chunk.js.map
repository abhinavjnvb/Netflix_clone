{"version":3,"sources":["axios.js","Row.js","requests.js","Banner.js","Nav.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","opts","height","width","playerVars","autoPlay","origin","window","location","className","map","movie","src","poster_path","backdrop_path","alt","name","onClick","movieTrailer","original_name","then","url","console","log","urlParams","URLSearchParams","URL","search","catch","error","handleClick","id","videoId","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundSize","background","overview","substr","Nav","show","handleShow","addEventListener","scrollY","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.575319f1.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst instance = axios.create({\n  baseURL: \"https://api.themoviedb.org/3\",\n});\n\nexport default instance;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"./axios\";\nimport \"./Row.css\";\nimport YouTube from \"react-youtube\";\nimport movieTrailer from \"movie-trailer\";\nconst Row = ({ title, fetchUrl, isLargeRow }) => {\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n  const baseUrl = \"https://image.tmdb.org/t/p/original\";\n  useEffect(() => {\n    const fetchData = async () => {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      // console.log(movies);\n      return request;\n    };\n    fetchData();\n  }, [fetchUrl]);\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      autoPlay: 1,\n      origin: window.location.origin,\n    },\n  };\n  const handleClick = (movie) => {\n    if (trailerUrl) {\n      setTrailerUrl(\"\");\n    } else {\n      movieTrailer(movie?.name || movie?.title || movie?.original_name || \"\")\n        .then((url) => {\n          console.log(url);\n          const urlParams = new URLSearchParams(new URL(url).search);\n          setTrailerUrl(urlParams.get(\"v\"));\n        })\n        .catch((error) => console.log(error));\n    }\n  };\n  return (\n    <div className=\"row\">\n      <h2 className=\"row_title\">{title}</h2>\n      <div className=\"row_posters\">\n        {movies.map((movie) => {\n          return (\n            <img\n              key={movie.id}\n              className={`row_poster ${isLargeRow && \"row_posterLarge\"}`}\n              src={`${baseUrl}${\n                isLargeRow ? movie.poster_path : movie.backdrop_path\n              }`}\n              alt={movie.name}\n              onClick={() => handleClick(movie)}\n            />\n          );\n        })}\n        {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\n      </div>\n    </div>\n  );\n};\nexport default Row;\n","const API_KEY = \"b4374df747704bbc146bea1d3be95ab0\";\n\nconst requests = {\n  fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\n  fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\n  fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\n  fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\n  fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\n  fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\n  fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\n  fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\n};\nexport default requests;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"./axios.js\";\nimport requests from \"./requests.js\";\nimport \"./Banner.css\";\nconst Banner = () => {\n  const baseUrl = \"https://image.tmdb.org/t/p/original\";\n  const [movie, setMovie] = useState([]);\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(requests.fetchNetflixOriginals);\n      console.log(\n        request.data.results[\n          Math.floor(Math.random() * request.data.results.length + 1)\n        ]\n      );\n      setMovie(\n        request.data.results[\n          Math.floor(Math.random() * request.data.results.length + 1)\n        ]\n      );\n    }\n    fetchData();\n  }, []);\n  function truncate(str, n) {\n    return str?.length > n ? str.substr(0, n - 1) + \"...\" : str;\n  }\n  return (\n    <header\n      className=\"banner\"\n      style={{\n        backgroundSize: \"cover\",\n        background: `url(${baseUrl}${movie?.backdrop_path})`,\n        // backgroundPosition: \"center center\",\n      }}\n    >\n      <div className=\"banner_contents\">\n        <h1 className=\"banner_title\">\n          {movie?.title || movie?.name || movie?.original_name}\n        </h1>\n        <div className=\"banner_buttons\">\n          <button className=\"banner_button\">Play</button>\n          <button className=\"banner_button\">My List</button>\n        </div>\n        <h1 className=\"banner_description\">{truncate(movie?.overview, 150)}</h1>\n      </div>\n      <div className=\"banner_fadeBottom\" />\n    </header>\n  );\n};\nexport default Banner;\n","import React, { useEffect, useState } from \"react\";\nimport \"./Nav.css\";\nconst Nav = () => {\n  const [show, handleShow] = useState(false);\n  useEffect(() => {\n    window.addEventListener(\"scroll\", () => {\n      if (window.scrollY > 100) {\n        handleShow(true);\n      } else {\n        handleShow(false);\n      }\n    });\n  }, []);\n  return (\n    <div className={`nav ${show && \"nav_black\"}`}>\n      <img\n        className=\"nav_logo\"\n        src=\"https://upload.wikimedia.org/wikipedia/commons/0/08/Netflix_2015_logo.svg\"\n        alt=\"Netflix Logo\"\n      />\n      <img\n        className=\"nav_avatar\"\n        src=\"https://upload.wikimedia.org/wikipedia/commons/0/0b/Netflix-avatar.png\"\n        alt=\"Netflix avatar\"\n      />\n    </div>\n  );\n};\nexport default Nav;\n","// import logo from './logo.svg';\nimport \"./App.css\";\nimport Row from \"./Row.js\";\nimport requests from \"./requests.js\";\nimport Banner from \"./Banner.js\";\nimport Nav from \"./Nav.js\";\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Nav />\n      <Banner />\n      <Row\n        title=\"Netflix originals\"\n        fetchUrl={requests.fetchNetflixOriginals}\n        isLargeRow\n      />\n      <Row title=\"Trending movies\" fetchUrl={requests.fetchTrending} />\n      <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated} />\n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies} />\n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />\n      <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies} />\n      <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies} />\n      <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}